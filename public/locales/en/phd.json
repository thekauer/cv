{
  "head_title": "Phd - Andr√°s Kauer",
  "desc": "I am a co-author of a Phd project which is about handwriting recognition. My task was to implement the paper, and I also took part in the design.",
  "cnn_title": "CNN recognition",
  "cnn": "The first working prototype of the project. However, it cannot find the letters by itself. That's why I had the idea to use the YOLO technology in the future, which is demonstrated below.",
  "documents": "Processed documents",
  "letters": "Letters gathered",
  "augmentation": "With augmentation",
  "python_processing": "Python processing",
  "lines_of_sherlock": "Lines of Sherlock",
  "gan_letters": "Letters generated by GAN",
  "p1": "A few years ago, one of my teachers offered me a job opportunity, which I accepted. She was working on her Phd, and she wanted to work with handwriting recognition in some way.",
  "p2": "We needed a lot of letters, which were written by volunteers, and then scanned. My task was to cut them out one by one, then check and normalize them. At least 1000 pieces were needed from every letter, but in the end I collected more, usually about 1500.",
  "p3": "Since it was a very monotonous and slow process to cut out the letters one by one, I could only cut out about 800 pieces per hour, and by the third letter I gave up and decided to write a program in my free time that would speed up the process. At that time I really liked the rust programming language, so I used it. I decided that if I could put together a working prototype in a weekend, I would use it. In the end, the ",
  "prototype": "prototype",
  "p4": " became so good, although it was far from perfect, that I never had to develop it further. With my new program I could cut out up to 2000-2500 letters per hour, but even in the worst case I was twice as fast as before. But at that time I had never heard of algorithms such as MSER.",
  "p5": "As letters were collected, it became more and more common to sort and shape them. Here I was able to show my skills, I could quickly create these scripts, and from then on I was the one implementing the whole project. Thanks to this, the dataset we created is available in several formats.",
  "p6": "The next phase was the letter recognition. By this time, I was already implementing the whole project. First we used CNNs. I learned how to build and program neural networks and I created and tested hundreds of models on our letters.",
  "cnn_caption": "One of the CNN models that we used",
  "p7": "CNN has its own disadvantage, that it only works with fixed size input. So if we want to recognize handwritten text, we have to find and separate the letters. Which is quite feasible with English handwriting, as the video above shows. But if the person writes a little bit randomly and connects the letters, then the results are not so good.",
  "p8": "Then the idea came to me to use a YOLO network. This is a neural network that not only recognizes, but also finds where the letter is located. I practically examined every possibility in the RCNN field, including RCNN, Fast RCNN, Faster RCNN, SSD, Darknet, Retinatet networks, and finally Yolov5 from Ultralitics.",
  "p9": "For YOLO we needed a text input, not just a single letter. It was not our intention to write long paragraphs with volunteers and label them with letters, so I wrote a python program that writes the Sherlock Holmes with our letters. A single input consists of 14 lines, each line contains a word, and each word is arranged so that every letter is in the right place.",
  "sherlock_input": "The Sherlock Holmes input",
  "p10": "While implementing this, I wrote my favorite bug. Which made the input only show the letter outline.",
  "bug_caption": "Bug in the input generator",
  "p11": "For this we needed more letters, so we turned to the augmentation that we already used in the CNNs. For which I also wrote a TDK thesis. And the idea came to me that we could use so-called GAN models, which can generate letters with artificial intelligence. I wrote a program for this, and after a little bit of improvement, it generated quite convincing letters and in the end I generated 500 of each letter with it.",
  "gan_caption": "Letters generated by GAN"
}
